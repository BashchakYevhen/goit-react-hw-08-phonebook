{"version":3,"file":"static/js/235.d09b74ec.chunk.js","mappings":"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","sources":["globalstyle.jsx","components/Filter/Filter.jsx","components/PhoneList/PhoneList.style.jsx","components/PhoneList/PhoneList.jsx","components/ContactItem/ContactItem.jsx","components/phoneBookForm/PhoneBookForm.style.jsx","components/phoneBookForm/PhoneBookForm.jsx","pages/phoneBook/phoneBook.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport 'modern-normalize';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n  h1,h2,h3,h4,h5,h6,p {\n    margin: 0;\n  }\n  ul {list-style:none}\n`;\n","import { PropTypes } from 'prop-types';\n\nexport const Filter = ({ changeFilter }) => {\n  return (\n    <label>\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" onChange={changeFilter}></input>\n    </label>\n  );\n};\nFilter.propType = {\n  changeFilter: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const PhoneFilter = styled.div`\n  margin: 0 auto;\n  padding: 20px;\n  width: 270px;\n  text-align: center;\n`;\nexport const PhoneListStyle = styled.ul`\n  margin: 0 auto;\n  padding: 20px;\n  width: 370px;\n  text-align: center;\n`;\nexport const ContactItemStyle = styled.li`\n  margin-bottom: 15px;\n  display: flex;\n  gap: 15px;\n  justify-content: space-between;\n`;\n","import { Filter } from 'components/Filter/Filter';\nimport { PropTypes } from 'prop-types';\nimport { PhoneFilter } from './PhoneList.style';\nexport const Phonelist = ({ changeFilter }) => {\n  return (\n    <PhoneFilter>\n      <h1>Contacts</h1>\n      <Filter changeFilter={changeFilter} />\n    </PhoneFilter>\n  );\n};\n\nPhonelist.propTypes = {\n  changeFilter: PropTypes.func.isRequired,\n};\n","import { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactItemStyle } from 'components/PhoneList/PhoneList.style';\nimport { delContact } from 'redux/operation';\nimport { getContactsData, getFilter } from 'redux/selectors';\n\nexport const ContactItem = () => {\n  const contactsState = useSelector(getContactsData);\n  const filterState = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const getFiltredContacts = () => {\n    if (contactsState) {\n      return contactsState.filter(contact =>\n        contact.name.toLowerCase().includes(filterState.filter)\n      );\n    }\n  };\n  const visibleContact = getFiltredContacts();\n\n  return visibleContact.map(({ id, name, number }) => {\n    return (\n      <ContactItemStyle key={id}>\n        {name}: {number}\n        <button\n          type=\"button\"\n          value={id}\n          onClick={() => {\n            dispatch(delContact(id));\n          }}\n        >\n          Delete\n        </button>\n      </ContactItemStyle>\n    );\n  });\n};\nContactItem.proptype = {\n  contacts: PropTypes.array.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const BookForm = styled.form`\n  padding: 20px;\n  margin: 20px auto;\n  border-radius: ${p => p.theme.radii.md};\n  border: solid ${p => p.theme.colors.text} 1px;\n  width: 270px;\n`;\nexport const BookLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`;\n","import { BookForm, BookLabel } from './PhoneBookForm.style';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operation';\nimport { getContactsData } from 'redux/selectors';\n\nexport const PhoneBookForm = () => {\n  const contactsState = useSelector(getContactsData);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    const isIncludeContact = name.toLowerCase();\n    contactsState.find(contact => {\n      return contact.name.toLowerCase() === isIncludeContact;\n    })\n      ? alert('You have already contact with name:' + name)\n      : dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <BookForm onSubmit={handleSubmit}>\n      <BookLabel>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </BookLabel>\n      <BookLabel>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </BookLabel>\n      <button type=\"submit\">Add contact</button>\n    </BookForm>\n  );\n};\n","import { GlobalStyle } from 'globalstyle';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Phonelist } from '../../components/PhoneList/PhoneList';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { PhoneListStyle } from '../../components/PhoneList/PhoneList.style';\nimport { filterValue } from 'redux/filterSlise';\nimport { fetchContacts } from 'redux/operation';\nimport { getIsLoading } from 'redux/selectors';\nimport { PhoneBookForm } from 'components/phoneBookForm/PhoneBookForm';\nexport const PhoneBook = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  function changeFilter(e) {\n    dispatch(filterValue(e.currentTarget.value.toLowerCase().trim()));\n  }\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <PhoneBookForm />\n      <Phonelist changeFilter={changeFilter} />\n      <PhoneListStyle>\n        {isLoading && <p>Loading contacts...</p>}\n        <ContactItem />\n      </PhoneListStyle>\n      <GlobalStyle />\n    </>\n  );\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["GlobalStyle","createGlobalStyle","Filter","changeFilter","type","name","onChange","propType","PropTypes","PhoneFilter","styled","PhoneListStyle","ContactItemStyle","Phonelist","ContactItem","contactsState","useSelector","getContactsData","filterState","getFilter","dispatch","useDispatch","filter","contact","toLowerCase","includes","getFiltredContacts","map","id","number","value","onClick","delContact","proptype","contacts","BookForm","p","theme","radii","md","colors","text","BookLabel","PhoneBookForm","onSubmit","e","preventDefault","form","currentTarget","elements","isIncludeContact","find","alert","addContact","reset","pattern","title","required","PhoneBook","isLoading","getIsLoading","useEffect","fetchContacts","filterValue","trim","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}