{"version":3,"file":"static/js/805.6a0fbd39.chunk.js","mappings":"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","sources":["components/FilterLabel/FilterLabel.jsx","components/PhoneList/PhoneList.style.jsx","components/PhoneList/PhoneList.jsx","components/ContactItem/ContactItem.style.js","components/ContactItem/ContactItem.jsx","components/addContactForm/addContactForm.style.jsx","components/addContactForm/addContactForm.jsx","components/warper/wraper.js","components/PhoneBookPage/PhoneBookPage.js","pages/login/login.style.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import { Input } from '@chakra-ui/react';\nimport { PropTypes } from 'prop-types';\n\nexport const FilterLabel = ({ changeFilter }) => {\n  return (\n    <label fontFamily=\"Lobster Two\">\n      Find contacts by name\n      <Input\n        w=\"300px\"\n        variant=\"flushed\"\n        borderColor={'#181818'}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"search number\"\n        onChange={changeFilter}\n      ></Input>\n    </label>\n  );\n};\nFilterLabel.propType = {\n  changeFilter: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const PhoneFilter = styled.div`\n  margin: 0 auto;\n  padding: 20px;\n  text-align: center;\n`;\nexport const PhoneListStyle = styled.ul`\n  margin: 0 auto;\n  padding: 20px;\n  width: 370px;\n\n  text-align: center;\n`;\nexport const ContactItemStyle = styled.li`\n  margin-bottom: 15px;\n  display: flex;\n  gap: 15px;\n  justify-content: space-between;\n`;\n","import { FilterLabel } from 'components/FilterLabel/FilterLabel';\nimport { PropTypes } from 'prop-types';\nimport { PhoneFilter } from './PhoneList.style';\nexport const PhoneList = ({ changeFilter }) => {\n  return (\n    <PhoneFilter>\n      <h1>Contacts</h1>\n      <FilterLabel changeFilter={changeFilter} />\n    </PhoneFilter>\n  );\n};\n\nPhoneList.propTypes = {\n  changeFilter: PropTypes.func.isRequired,\n};\n","import { ButtonStyle } from 'pages/login/login.style';\nimport styled from 'styled-components';\n\nexport const DelButton = styled(ButtonStyle)`\n  width: 100px;\n`;\n","import { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactItemStyle } from 'components/PhoneList/PhoneList.style';\nimport { delContact } from 'redux/operation';\nimport { getContactsData, getFilter } from 'redux/selectors';\nimport { DelButton } from './ContactItem.style';\n\nexport const ContactItem = () => {\n  const contactsState = useSelector(getContactsData);\n  const filterState = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const getFiltredContacts = () => {\n    if (contactsState) {\n      return contactsState.filter(contact =>\n        contact.name.toLowerCase().includes(filterState.filter)\n      );\n    }\n  };\n  const visibleContact = getFiltredContacts();\n\n  return visibleContact.map(({ id, name, number }) => {\n    return (\n      <ContactItemStyle key={id}>\n        {name}: {number}\n        <DelButton\n          type=\"button\"\n          value={id}\n          onClick={() => {\n            dispatch(delContact(id));\n          }}\n        >\n          Delete\n        </DelButton>\n      </ContactItemStyle>\n    );\n  });\n};\nContactItem.proptype = {\n  contacts: PropTypes.array.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const BookForm = styled.form`\n  padding: 20px;\n  margin: 20px auto;\n  width: 420px;\n  min-height: 300px;\n`;\nexport const BookLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n`;\n","import { BookForm, BookLabel } from './addContactForm.style';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operation';\nimport { getContactsData } from 'redux/selectors';\nimport { Input, InputGroup, InputLeftAddon } from '@chakra-ui/react';\nimport { ButtonStyle } from 'pages/login/login.style';\n\nexport const AddContactForm = () => {\n  const contactsState = useSelector(getContactsData);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n    console.log('NUMBER===>', form.elements);\n    const isIncludeContact = name.toLowerCase();\n    contactsState.find(contact => {\n      return contact.name.toLowerCase() === isIncludeContact;\n    })\n      ? alert('You have already contact with name:' + name)\n      : dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <BookForm onSubmit={handleSubmit}>\n      <BookLabel>\n        Name\n        <Input\n          borderColor={'#181818'}\n          variant=\"filled\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </BookLabel>\n      <BookLabel>\n        Number\n        <InputGroup borderColor={'#181818'}>\n          <InputLeftAddon children=\"+48\" />\n          <Input\n            name=\"number\"\n            borderColor={'#181818'}\n            type=\"tel\"\n            placeholder=\"phone number\"\n            variant=\"filled\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </InputGroup>\n      </BookLabel>\n      <ButtonStyle type=\"submit\">Add contact</ButtonStyle>\n    </BookForm>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin: 30px auto;\n  width: 420px;\n  border-radius: 12px;\n  background-color: rgb(238, 241, 243, 0.8);\n  box-shadow: 1px 11px 28px -9px rgba(192, 192, 192, 1);\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PhoneList } from '../PhoneList/PhoneList';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { PhoneListStyle } from '../PhoneList/PhoneList.style';\nimport { filterValue } from 'redux/filterSlice';\nimport { fetchContacts } from 'redux/operation';\nimport { getIsLoading } from 'redux/selectors';\nimport { AddContactForm } from 'components/addContactForm/addContactForm';\nimport { Spinner } from '@chakra-ui/react';\nimport { Wrapper } from 'components/warper/wraper';\n\nexport default function PhoneBookPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  function changeFilter(e) {\n    dispatch(filterValue(e.currentTarget.value.toLowerCase().trim()));\n  }\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <Wrapper>\n      <AddContactForm />\n      <PhoneList changeFilter={changeFilter} />\n      <PhoneListStyle>\n        <ContactItem />\n        {isLoading && <Spinner />}\n      </PhoneListStyle>\n    </Wrapper>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  margin: 100px auto;\n  width: 420px;\n  min-height: 300px;\n  border-radius: 12px;\n  background-color: rgb(238, 241, 243, 0.8);\n  box-shadow: 1px 11px 28px -9px rgba(192, 192, 192, 1);\n`;\nexport const ButtonStyle = styled.button`\n  padding: 5px;\n  width: 170px;\n  height: 40px;\n\n  font-size: large;\n  border-radius: 14px;\n  background-color: #181818;\n  color: ${p => p.theme.colors.white};\n  &:hover {\n    background-color: ${p => p.theme.colors.white};\n    color: ${p => p.theme.colors.muted};\n  }\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n`;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["FilterLabel","changeFilter","fontFamily","w","variant","borderColor","type","name","placeholder","onChange","propType","PropTypes","PhoneFilter","styled","PhoneListStyle","ContactItemStyle","PhoneList","DelButton","ButtonStyle","ContactItem","contactsState","useSelector","getContactsData","filterState","getFilter","dispatch","useDispatch","filter","contact","toLowerCase","includes","getFiltredContacts","map","id","number","value","onClick","delContact","proptype","contacts","BookForm","BookLabel","AddContactForm","onSubmit","e","preventDefault","form","currentTarget","elements","console","log","isIncludeContact","find","alert","addContact","reset","pattern","title","required","children","Wrapper","PhoneBookPage","isLoading","getIsLoading","useEffect","fetchContacts","filterValue","trim","Form","p","theme","colors","white","muted","Label","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}